{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\magshimim\\\\react\\\\weather\\\\src\\\\components\\\\Weather\\\\WeatherDetails.js\";\nimport React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport { getCitiesList } from '../../weatherAPI';\nimport WeatherCard from './WeatherCard';\nimport '../../styles.css';\n\nclass WeatherDetails extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cityCode: 215854,\n      cityName: 'Tel Aviv',\n      options: []\n    };\n  }\n\n  //Tel Aviv code - default location code\n  handleEnter(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      this.setState({\n        cityCode: this.getCityKey(document.getElementById('loc_input').value)\n      });\n      console.log(this.state.cityCode);\n    }\n  }\n\n  async setOptions(input) {\n    this.setState({\n      options: await getCitiesList(input)\n    });\n    console.log(this.state.options);\n  }\n\n  createCityString(city) {\n    return `${city.LocalizedName}, ${city.AdministrativeArea.LocalizedName}, ${city.Country.LocalizedName}`;\n  }\n\n  async getCityKey(city_name) {\n    var cities_list = await getCitiesList(city_name);\n    console.log(cities_list);\n\n    for (var city in cities_list) {\n      var key = cities_list[city].split('/')[0];\n      var name = cities_list[city].split('/')[1];\n      console.log(name + \"    \" + key);\n\n      if (city_name === name) {\n        return key;\n      }\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(FormControl, {\n      className: \"search-bar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(TextField, {\n      id: \"loc_input\",\n      label: \"Search Location\",\n      autoComplete: \"false\",\n      onChange: () => this.setOptions(document.getElementById('loc_input').value),\n      onKeyDown: e => this.handleEnter(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    })), React.createElement(WeatherCard, {\n      code: this.state.cityCode,\n      city_name: this.state.cityName,\n      callback: this.props.callback,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default WeatherDetails;","map":{"version":3,"sources":["C:/Users/magshimim/react/weather/src/components/Weather/WeatherDetails.js"],"names":["React","FormControl","TextField","getCitiesList","WeatherCard","WeatherDetails","Component","state","cityCode","cityName","options","handleEnter","e","key","preventDefault","setState","getCityKey","document","getElementById","value","console","log","setOptions","input","createCityString","city","LocalizedName","AdministrativeArea","Country","city_name","cities_list","split","name","render","props","callback"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { getCitiesList } from '../../weatherAPI';\r\nimport WeatherCard from './WeatherCard';\r\nimport '../../styles.css';\r\n\r\nclass WeatherDetails extends React.Component {\r\n\r\n  state = { cityCode: 215854 , cityName: 'Tel Aviv', options: [] }; //Tel Aviv code - default location code\r\n\r\n  handleEnter(e) {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      this.setState({\r\n        cityCode: this.getCityKey(document.getElementById('loc_input').value)\r\n      });\r\n      console.log(this.state.cityCode);\r\n    }\r\n  }\r\n\r\n  async setOptions(input) {\r\n    this.setState({\r\n      options: await getCitiesList(input)\r\n    });\r\n    console.log(this.state.options);\r\n  }\r\n\r\n  createCityString(city) {\r\n    return `${city.LocalizedName}, ${city.AdministrativeArea.LocalizedName}, ${city.Country.LocalizedName}`;\r\n  }\r\n\r\n  async getCityKey(city_name) {\r\n    var cities_list = await getCitiesList(city_name);\r\n    console.log(cities_list);\r\n    for (var city in cities_list) {\r\n      var key = cities_list[city].split('/')[0];\r\n      var name = cities_list[city].split('/')[1];\r\n      console.log(name + \"    \" + key);\r\n      if (city_name === name) {\r\n        return key;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FormControl className=\"search-bar\">\r\n          <TextField\r\n            id=\"loc_input\" \r\n            label=\"Search Location\"\r\n            autoComplete=\"false\"\r\n            onChange={() => this.setOptions(document.getElementById('loc_input').value)}\r\n            onKeyDown={(e) => this.handleEnter(e)}\r\n          />\r\n        </FormControl>\r\n        <WeatherCard code={this.state.cityCode} city_name={this.state.cityName} callback={this.props.callback}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherDetails;"]},"metadata":{},"sourceType":"module"}