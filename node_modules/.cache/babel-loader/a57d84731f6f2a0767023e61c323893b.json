{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useTheme } from '@material-ui/core';\nexport default (({\n  screen,\n  autoCollapseDisabled,\n  collapsedBreakpoint = 'md',\n  setCollapsed\n}) => {\n  const _useTheme = useTheme(),\n        keys = _useTheme.breakpoints.keys;\n\n  const screenObserver = useRef(null); // eslint-disable-next-line consistent-return\n\n  useEffect(() => {\n    // skip everything if user disable this feature in config\n    if (!autoCollapseDisabled) {\n      const prevScreenIndex = keys.indexOf(screenObserver.current);\n      const breakpointScreenIndex = keys.indexOf(collapsedBreakpoint);\n      const currentScreenIndex = keys.indexOf(screen);\n\n      if ( // at first render, auto-collapsed if screen <= breakpoint\n      !screenObserver.current && currentScreenIndex <= breakpointScreenIndex && currentScreenIndex !== -1) {\n        setCollapsed(true);\n      }\n\n      if (prevScreenIndex !== -1 && prevScreenIndex > breakpointScreenIndex && currentScreenIndex <= breakpointScreenIndex) {\n        // reduce from bigger to breakpoint\n        setCollapsed(true);\n      }\n\n      if (prevScreenIndex !== -1 && prevScreenIndex <= breakpointScreenIndex && currentScreenIndex > breakpointScreenIndex) {\n        // pass breakpoint to bigger screen\n        setCollapsed(false);\n      }\n    }\n\n    screenObserver.current = screen; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [screen, autoCollapseDisabled, collapsedBreakpoint]);\n});","map":{"version":3,"sources":["C:/Users/magshimim/react/weather/node_modules/@mui-treasury/layout/hooks/useAutoCollapse.js"],"names":["useEffect","useRef","useTheme","screen","autoCollapseDisabled","collapsedBreakpoint","setCollapsed","keys","breakpoints","screenObserver","prevScreenIndex","indexOf","current","breakpointScreenIndex","currentScreenIndex"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,gBAAgB,CAAC;AACfC,EAAAA,MADe;AAEfC,EAAAA,oBAFe;AAGfC,EAAAA,mBAAmB,GAAG,IAHP;AAIfC,EAAAA;AAJe,CAAD,KAKV;AAAA,oBAKAJ,QAAQ,EALR;AAAA,QAGAK,IAHA,aAEFC,WAFE,CAGAD,IAHA;;AAMJ,QAAME,cAAc,GAAGR,MAAM,CAAC,IAAD,CAA7B,CANI,CAMiC;;AAErCD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACI,oBAAL,EAA2B;AACzB,YAAMM,eAAe,GAAGH,IAAI,CAACI,OAAL,CAAaF,cAAc,CAACG,OAA5B,CAAxB;AACA,YAAMC,qBAAqB,GAAGN,IAAI,CAACI,OAAL,CAAaN,mBAAb,CAA9B;AACA,YAAMS,kBAAkB,GAAGP,IAAI,CAACI,OAAL,CAAaR,MAAb,CAA3B;;AAEA,WAAK;AACL,OAACM,cAAc,CAACG,OAAhB,IAA2BE,kBAAkB,IAAID,qBAAjD,IAA0EC,kBAAkB,KAAK,CAAC,CADlG,EACqG;AACnGR,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,UAAII,eAAe,KAAK,CAAC,CAArB,IAA0BA,eAAe,GAAGG,qBAA5C,IAAqEC,kBAAkB,IAAID,qBAA/F,EAAsH;AACpH;AACAP,QAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,UAAII,eAAe,KAAK,CAAC,CAArB,IAA0BA,eAAe,IAAIG,qBAA7C,IAAsEC,kBAAkB,GAAGD,qBAA/F,EAAsH;AACpH;AACAP,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF;;AAEDG,IAAAA,cAAc,CAACG,OAAf,GAAyBT,MAAzB,CAvBc,CAuBmB;AAClC,GAxBQ,EAwBN,CAACA,MAAD,EAASC,oBAAT,EAA+BC,mBAA/B,CAxBM,CAAT;AAyBD,CAtCD","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useTheme } from '@material-ui/core';\nexport default (({\n  screen,\n  autoCollapseDisabled,\n  collapsedBreakpoint = 'md',\n  setCollapsed\n}) => {\n  const {\n    breakpoints: {\n      keys\n    }\n  } = useTheme();\n  const screenObserver = useRef(null); // eslint-disable-next-line consistent-return\n\n  useEffect(() => {\n    // skip everything if user disable this feature in config\n    if (!autoCollapseDisabled) {\n      const prevScreenIndex = keys.indexOf(screenObserver.current);\n      const breakpointScreenIndex = keys.indexOf(collapsedBreakpoint);\n      const currentScreenIndex = keys.indexOf(screen);\n\n      if ( // at first render, auto-collapsed if screen <= breakpoint\n      !screenObserver.current && currentScreenIndex <= breakpointScreenIndex && currentScreenIndex !== -1) {\n        setCollapsed(true);\n      }\n\n      if (prevScreenIndex !== -1 && prevScreenIndex > breakpointScreenIndex && currentScreenIndex <= breakpointScreenIndex) {\n        // reduce from bigger to breakpoint\n        setCollapsed(true);\n      }\n\n      if (prevScreenIndex !== -1 && prevScreenIndex <= breakpointScreenIndex && currentScreenIndex > breakpointScreenIndex) {\n        // pass breakpoint to bigger screen\n        setCollapsed(false);\n      }\n    }\n\n    screenObserver.current = screen; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [screen, autoCollapseDisabled, collapsedBreakpoint]);\n});"]},"metadata":{},"sourceType":"module"}