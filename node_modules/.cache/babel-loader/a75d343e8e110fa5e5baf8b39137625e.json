{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\magshimim\\\\react\\\\weather\\\\src\\\\components\\\\Weather\\\\WeatherCard.js\";\nimport React from 'react';\nimport Card from '@material-ui/core/Card';\nimport IconButton from '@material-ui/core/IconButton';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport Typography from '@material-ui/core/Typography';\nimport Prediction from './Prediction';\nimport { requestFiveDayPrediction, requestWeatherDetails } from '../../weatherAPI';\nimport '../../styles.css';\n\nclass WeatherCard extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      favStat: true,\n      futureData: [],\n      createForecast: false,\n      currentTemp: null\n    };\n  }\n\n  async componentDidMount() {\n    const current_temp = await requestWeatherDetails(this.props.code);\n    const forecast = await requestFiveDayPrediction(this.props.code);\n    var create = forecast.Headline ? true : false;\n    console.log(create);\n    this.setState({\n      futureData: forecast,\n      createForecast: create,\n      currentTemp: current_temp\n    });\n  }\n\n  changeFavStat() {\n    this.setState({\n      favStat: !this.state.favStat\n    });\n    this.props.callback(this.props.code, this.props.city_name, this.state.favStat);\n  }\n\n  getFutureforecast() {\n    if (this.state.futureData.DailyForecasts !== undefined) {\n      console.log(\"OOOOO\");\n      console.log(this.state.futureData.Headline.Link);\n      this.forceUpdate();\n      return React.createElement(\"div\", {\n        className: \"card-div\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, this.state.futureData.DailyForecasts.map((day, index) => {\n        return React.createElement(Card, {\n          className: \"card\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(Prediction, {\n          data: day,\n          is_from_fav: false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }));\n      }));\n    }\n\n    return null;\n  }\n\n  render() {\n    console.log(this.props.code);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(Card, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"credentials\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      variant: \"h6\",\n      className: \"details_tag\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, this.props.city_name.split(',')[0] + \", \" + this.props.city_name.split(',')[2], \"\\t\", this.state.currentTemp !== null ? this.state.currentTemp[0].Temperature.Metric.Value + \"Â°C\" : null), React.createElement(IconButton, {\n      className: \"fav-icon\",\n      onClick: () => this.changeFavStat(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, !this.state.favStat ? React.createElement(FavoriteIcon, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }) : React.createElement(FavoriteBorderIcon, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    })), React.createElement(Typography, {\n      align: \"center\",\n      variant: \"h5\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.state.createForecast ? this.state.futureData.Headline.Text : null)), this.state.createForecast ? this.getFutureforecast() : React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Loading...\")));\n  }\n\n}\n\nexport default WeatherCard;","map":{"version":3,"sources":["C:/Users/magshimim/react/weather/src/components/Weather/WeatherCard.js"],"names":["React","Card","IconButton","FavoriteIcon","FavoriteBorderIcon","Typography","Prediction","requestFiveDayPrediction","requestWeatherDetails","WeatherCard","Component","state","favStat","futureData","createForecast","currentTemp","componentDidMount","current_temp","props","code","forecast","create","Headline","console","log","setState","changeFavStat","callback","city_name","getFutureforecast","DailyForecasts","undefined","Link","forceUpdate","map","day","index","render","split","Temperature","Metric","Value","Text"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Prediction from './Prediction';\r\nimport { requestFiveDayPrediction, requestWeatherDetails } from '../../weatherAPI';\r\nimport '../../styles.css';\r\n\r\nclass WeatherCard extends React.Component {\r\n\r\n  state = { favStat: true, futureData: [], createForecast: false, currentTemp: null};\r\n\r\n  async componentDidMount() {\r\n    const current_temp = await requestWeatherDetails(this.props.code);\r\n    const forecast = await requestFiveDayPrediction(this.props.code);\r\n    var create = forecast.Headline ? true : false\r\n    console.log(create);\r\n    this.setState({\r\n      futureData: forecast,\r\n      createForecast: create,\r\n      currentTemp: current_temp\r\n    });\r\n  }\r\n\r\n  changeFavStat() {\r\n    this.setState({ favStat: !this.state.favStat});\r\n    this.props.callback(this.props.code, this.props.city_name ,this.state.favStat);\r\n  }\r\n\r\n  getFutureforecast() {\r\n    if (this.state.futureData.DailyForecasts !== undefined) {\r\n      console.log(\"OOOOO\");\r\n      console.log(this.state.futureData.Headline.Link);\r\n      this.forceUpdate();\r\n      return (\r\n        <div className=\"card-div\">\r\n          { this.state.futureData.DailyForecasts.map((day, index) => {\r\n            return (\r\n              <Card className=\"card\" key={index}>\r\n                <Prediction data={day} is_from_fav={false}/>\r\n              </Card>\r\n            );\r\n          })} \r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.code);\r\n    return (\r\n      <div>\r\n        <Card>\r\n          <div id=\"credentials\">\r\n            <Typography variant=\"h6\" className=\"details_tag\">\r\n              {this.props.city_name.split(',')[0] + \", \" + this.props.city_name.split(',')[2]}{\"\\t\"}\r\n              {this.state.currentTemp !== null ? this.state.currentTemp[0].Temperature.Metric.Value + \"Â°C\": null}\r\n            </Typography>\r\n            <IconButton className=\"fav-icon\" onClick={() => this.changeFavStat()}>\r\n              {!this.state.favStat ? <FavoriteIcon color=\"primary\"/> : <FavoriteBorderIcon color=\"primary\"/>}\r\n            </IconButton>\r\n            <Typography align=\"center\" variant=\"h5\" >{ this.state.createForecast ? this.state.futureData.Headline.Text : null }</Typography>\r\n          </div>\r\n          {this.state.createForecast ? this.getFutureforecast() : <Typography>Loading...</Typography>}\r\n        </Card>          \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherCard;"]},"metadata":{},"sourceType":"module"}