{"ast":null,"code":"import get from 'lodash.get';\nimport createEdgeSidebar from './edgeSidebar';\nimport createWidth from './width';\nimport { upperFirst } from '../utils';\nexport default ((ctx = {}) => {\n  const _ctx$header = ctx.header,\n        header = _ctx$header === void 0 ? {} : _ctx$header,\n        _ctx$sidebar = ctx.sidebar,\n        sidebar = _ctx$sidebar === void 0 ? {} : _ctx$sidebar,\n        opened = ctx.opened;\n  const edgeSidebar = createEdgeSidebar(ctx);\n\n  const incrementZIndex = (theme, plus) => ({\n    zIndex: get(theme, 'zIndex.drawer', 1200) + plus\n  });\n\n  const sidebarWidth = edgeSidebar.getWidth();\n  const isNotStatic = header.position !== 'static';\n  const isAboveMainSidebar = header.clipped && isNotStatic;\n  const isAboveSubSidebar = header.secondaryClipped && isNotStatic;\n  const isAboveSomeSidebars = isAboveMainSidebar || isAboveSubSidebar;\n  return {\n    getHeaderZIndexStyle: theme => {\n      if (isAboveSomeSidebars) {\n        return incrementZIndex(theme, 10);\n      }\n\n      return undefined;\n    },\n\n    getMarginStyle({\n      persistentBehavior\n    } = {}) {\n      if (sidebar.variant === 'temporary') {\n        return undefined;\n      }\n\n      if (sidebar.variant === 'permanent') {\n        return {\n          [`margin${upperFirst(sidebar.anchor)}`]: sidebarWidth\n        };\n      }\n\n      if (sidebar.variant === 'persistent') {\n        return {\n          [`margin${upperFirst(sidebar.anchor)}`]: opened && (persistentBehavior === 'fit' || persistentBehavior === 'flexible') ? sidebarWidth : 0\n        };\n      }\n\n      return undefined;\n    },\n\n    getWidthObj({\n      persistentBehavior\n    } = {}) {\n      if (sidebar.variant === 'permanent') {\n        return createWidth(sidebarWidth);\n      }\n\n      if (sidebar.variant === 'persistent') {\n        return createWidth(opened && persistentBehavior === 'fit' ? sidebarWidth : 0);\n      }\n\n      return createWidth();\n    },\n\n    getWidthStyle(behavior) {\n      return this.getWidthObj(behavior).getStyle();\n    }\n\n  };\n});","map":{"version":3,"sources":["C:/Users/magshimim/react/weather/node_modules/@mui-treasury/layout/models/edgeEffect.js"],"names":["get","createEdgeSidebar","createWidth","upperFirst","ctx","header","sidebar","opened","edgeSidebar","incrementZIndex","theme","plus","zIndex","sidebarWidth","getWidth","isNotStatic","position","isAboveMainSidebar","clipped","isAboveSubSidebar","secondaryClipped","isAboveSomeSidebars","getHeaderZIndexStyle","undefined","getMarginStyle","persistentBehavior","variant","anchor","getWidthObj","getWidthStyle","behavior","getStyle"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,YAAhB;AACA,OAAOC,iBAAP,MAA8B,eAA9B;AACA,OAAOC,WAAP,MAAwB,SAAxB;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,gBAAgB,CAACC,GAAG,GAAG,EAAP,KAAc;AAAA,sBAKxBA,GALwB,CAE1BC,MAF0B;AAAA,QAE1BA,MAF0B,4BAEjB,EAFiB;AAAA,uBAKxBD,GALwB,CAG1BE,OAH0B;AAAA,QAG1BA,OAH0B,6BAGhB,EAHgB;AAAA,QAI1BC,MAJ0B,GAKxBH,GALwB,CAI1BG,MAJ0B;AAM5B,QAAMC,WAAW,GAAGP,iBAAiB,CAACG,GAAD,CAArC;;AAEA,QAAMK,eAAe,GAAG,CAACC,KAAD,EAAQC,IAAR,MAAkB;AACxCC,IAAAA,MAAM,EAAEZ,GAAG,CAACU,KAAD,EAAQ,eAAR,EAAyB,IAAzB,CAAH,GAAoCC;AADJ,GAAlB,CAAxB;;AAIA,QAAME,YAAY,GAAGL,WAAW,CAACM,QAAZ,EAArB;AACA,QAAMC,WAAW,GAAGV,MAAM,CAACW,QAAP,KAAoB,QAAxC;AACA,QAAMC,kBAAkB,GAAGZ,MAAM,CAACa,OAAP,IAAkBH,WAA7C;AACA,QAAMI,iBAAiB,GAAGd,MAAM,CAACe,gBAAP,IAA2BL,WAArD;AACA,QAAMM,mBAAmB,GAAGJ,kBAAkB,IAAIE,iBAAlD;AACA,SAAO;AACLG,IAAAA,oBAAoB,EAAEZ,KAAK,IAAI;AAC7B,UAAIW,mBAAJ,EAAyB;AACvB,eAAOZ,eAAe,CAACC,KAAD,EAAQ,EAAR,CAAtB;AACD;;AAED,aAAOa,SAAP;AACD,KAPI;;AASLC,IAAAA,cAAc,CAAC;AACbC,MAAAA;AADa,QAEX,EAFU,EAEN;AACN,UAAInB,OAAO,CAACoB,OAAR,KAAoB,WAAxB,EAAqC;AACnC,eAAOH,SAAP;AACD;;AAED,UAAIjB,OAAO,CAACoB,OAAR,KAAoB,WAAxB,EAAqC;AACnC,eAAO;AACL,WAAE,SAAQvB,UAAU,CAACG,OAAO,CAACqB,MAAT,CAAiB,EAArC,GAAyCd;AADpC,SAAP;AAGD;;AAED,UAAIP,OAAO,CAACoB,OAAR,KAAoB,YAAxB,EAAsC;AACpC,eAAO;AACL,WAAE,SAAQvB,UAAU,CAACG,OAAO,CAACqB,MAAT,CAAiB,EAArC,GAAyCpB,MAAM,KAAKkB,kBAAkB,KAAK,KAAvB,IAAgCA,kBAAkB,KAAK,UAA5D,CAAN,GAAgFZ,YAAhF,GAA+F;AADnI,SAAP;AAGD;;AAED,aAAOU,SAAP;AACD,KA7BI;;AA+BLK,IAAAA,WAAW,CAAC;AACVH,MAAAA;AADU,QAER,EAFO,EAEH;AACN,UAAInB,OAAO,CAACoB,OAAR,KAAoB,WAAxB,EAAqC;AACnC,eAAOxB,WAAW,CAACW,YAAD,CAAlB;AACD;;AAED,UAAIP,OAAO,CAACoB,OAAR,KAAoB,YAAxB,EAAsC;AACpC,eAAOxB,WAAW,CAACK,MAAM,IAAIkB,kBAAkB,KAAK,KAAjC,GAAyCZ,YAAzC,GAAwD,CAAzD,CAAlB;AACD;;AAED,aAAOX,WAAW,EAAlB;AACD,KA3CI;;AA6CL2B,IAAAA,aAAa,CAACC,QAAD,EAAW;AACtB,aAAO,KAAKF,WAAL,CAAiBE,QAAjB,EAA2BC,QAA3B,EAAP;AACD;;AA/CI,GAAP;AAkDD,CAnED","sourcesContent":["import get from 'lodash.get';\nimport createEdgeSidebar from './edgeSidebar';\nimport createWidth from './width';\nimport { upperFirst } from '../utils';\nexport default ((ctx = {}) => {\n  const {\n    header = {},\n    sidebar = {},\n    opened\n  } = ctx;\n  const edgeSidebar = createEdgeSidebar(ctx);\n\n  const incrementZIndex = (theme, plus) => ({\n    zIndex: get(theme, 'zIndex.drawer', 1200) + plus\n  });\n\n  const sidebarWidth = edgeSidebar.getWidth();\n  const isNotStatic = header.position !== 'static';\n  const isAboveMainSidebar = header.clipped && isNotStatic;\n  const isAboveSubSidebar = header.secondaryClipped && isNotStatic;\n  const isAboveSomeSidebars = isAboveMainSidebar || isAboveSubSidebar;\n  return {\n    getHeaderZIndexStyle: theme => {\n      if (isAboveSomeSidebars) {\n        return incrementZIndex(theme, 10);\n      }\n\n      return undefined;\n    },\n\n    getMarginStyle({\n      persistentBehavior\n    } = {}) {\n      if (sidebar.variant === 'temporary') {\n        return undefined;\n      }\n\n      if (sidebar.variant === 'permanent') {\n        return {\n          [`margin${upperFirst(sidebar.anchor)}`]: sidebarWidth\n        };\n      }\n\n      if (sidebar.variant === 'persistent') {\n        return {\n          [`margin${upperFirst(sidebar.anchor)}`]: opened && (persistentBehavior === 'fit' || persistentBehavior === 'flexible') ? sidebarWidth : 0\n        };\n      }\n\n      return undefined;\n    },\n\n    getWidthObj({\n      persistentBehavior\n    } = {}) {\n      if (sidebar.variant === 'permanent') {\n        return createWidth(sidebarWidth);\n      }\n\n      if (sidebar.variant === 'persistent') {\n        return createWidth(opened && persistentBehavior === 'fit' ? sidebarWidth : 0);\n      }\n\n      return createWidth();\n    },\n\n    getWidthStyle(behavior) {\n      return this.getWidthObj(behavior).getStyle();\n    }\n\n  };\n});"]},"metadata":{},"sourceType":"module"}