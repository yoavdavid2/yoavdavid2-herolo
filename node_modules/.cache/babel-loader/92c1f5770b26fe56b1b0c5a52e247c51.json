{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport useWindow from './useWindow';\n\nfunction useEventListener(eventName, handler, element) {\n  const _useWindow = useWindow(),\n        iWindow = _useWindow.iWindow;\n\n  if (!element && typeof iWindow !== 'undefined') {\n    element = iWindow;\n  } // Create a ref that stores handler\n\n\n  const savedHandler = useRef(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    // Make sure element supports addEventListener\n    // On\n    const isSupported = element && element.addEventListener;\n    if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n    const eventListener = event => savedHandler.current(event); // Add event listener\n\n\n    element.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n    // eslint-disable-next-line consistent-return\n\n    return () => {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nexport default useEventListener;","map":{"version":3,"sources":["C:/Users/magshimim/react/weather/node_modules/@mui-treasury/layout/hooks/useEventListener.js"],"names":["useRef","useEffect","useWindow","useEventListener","eventName","handler","element","iWindow","savedHandler","current","isSupported","addEventListener","eventListener","event","removeEventListener"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAA8CC,OAA9C,EAAuD;AAAA,qBAGjDJ,SAAS,EAHwC;AAAA,QAEnDK,OAFmD,cAEnDA,OAFmD;;AAKrD,MAAI,CAACD,OAAD,IAAY,OAAOC,OAAP,KAAmB,WAAnC,EAAgD;AAC9CD,IAAAA,OAAO,GAAGC,OAAV;AACD,GAPoD,CAOnD;;;AAGF,QAAMC,YAAY,GAAGR,MAAM,EAA3B,CAVqD,CAUtB;AAC/B;AACA;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,YAAY,CAACC,OAAb,GAAuBJ,OAAvB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAGAJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,UAAMS,WAAW,GAAGJ,OAAO,IAAIA,OAAO,CAACK,gBAAvC;AACA,QAAI,CAACD,WAAL,EAAkB,OAJJ,CAIY;;AAE1B,UAAME,aAAa,GAAGC,KAAK,IAAIL,YAAY,CAACC,OAAb,CAAqBI,KAArB,CAA/B,CANc,CAM8C;;;AAG5DP,IAAAA,OAAO,CAACK,gBAAR,CAAyBP,SAAzB,EAAoCQ,aAApC,EATc,CASsC;AACpD;;AAEA,WAAO,MAAM;AACXN,MAAAA,OAAO,CAACQ,mBAAR,CAA4BV,SAA5B,EAAuCQ,aAAvC;AACD,KAFD;AAGD,GAfQ,EAeN,CAACR,SAAD,EAAYE,OAAZ,CAfM,CAee;AAff,GAAT;AAiBD;;AAED,eAAeH,gBAAf","sourcesContent":["import { useRef, useEffect } from 'react';\nimport useWindow from './useWindow';\n\nfunction useEventListener(eventName, handler, element) {\n  const {\n    iWindow\n  } = useWindow();\n\n  if (!element && typeof iWindow !== 'undefined') {\n    element = iWindow;\n  } // Create a ref that stores handler\n\n\n  const savedHandler = useRef(); // Update ref.current value if handler changes.\n  // This allows our effect below to always get latest handler ...\n  // ... without us needing to pass it in effect deps array ...\n  // ... and potentially cause effect to re-run every render.\n\n  useEffect(() => {\n    savedHandler.current = handler;\n  }, [handler]);\n  useEffect(() => {\n    // Make sure element supports addEventListener\n    // On\n    const isSupported = element && element.addEventListener;\n    if (!isSupported) return; // Create event listener that calls handler function stored in ref\n\n    const eventListener = event => savedHandler.current(event); // Add event listener\n\n\n    element.addEventListener(eventName, eventListener); // Remove event listener on cleanup\n    // eslint-disable-next-line consistent-return\n\n    return () => {\n      element.removeEventListener(eventName, eventListener);\n    };\n  }, [eventName, element] // Re-run if eventName or element changes\n  );\n}\n\nexport default useEventListener;"]},"metadata":{},"sourceType":"module"}