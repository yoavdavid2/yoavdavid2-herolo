{"ast":null,"code":"import axios from 'axios';\nconst apiKey = 'xJ4I5DWKpOU1XHmK1ZrDmIkgfffyLX3s';\n\nrequestWeatherDetails = async city_code => {\n  if (city_code !== null && city_code !== undefined) {\n    console.log(\"weather bitches\");\n    const data = await fetch(`http://dataservice.accuweather.com/currentconditions/v1/${city_code}?apikey=${apiKey}`).json();\n    console.log(data);\n    return data;\n  }\n\n  return {};\n};\n\nexport function requestFiveDayPrediction(city_code) {\n  if (city_code !== null && city_code !== undefined) {\n    console.log(\"weather bitches\");\n    axios.get(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${city_code}.json`, {\n      params: {\n        apikey: apiKey,\n        metric: true\n      }\n    }).then(({\n      data\n    }) => {\n      console.log(data);\n      return data.json();\n    });\n  }\n\n  console.log(\"nop\");\n  return {};\n}\nexport function getCitiesList(city_name) {\n  var new_data = {};\n\n  if (city_name !== null && city_name !== undefined && city_name !== \"\") {\n    console.log(\"getting city list\");\n    axios.get(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete`, {\n      params: {\n        apikey: apiKey,\n        q: city_name\n      }\n    }).then(({\n      data\n    }) => {\n      console.log(data); //filter the data to key, localizedName (see console)    \n\n      data.map((city, index) => {\n        new_data[city.Key] = `${city.LocalizedName}, ${city.AdministrativeArea.LocalizedName}, ${city.Country.LocalizedName}`;\n      });\n      console.log(new_data);\n    });\n  }\n\n  return new_data;\n}","map":{"version":3,"sources":["C:/Users/magshimim/react/weather/src/weatherAPI.js"],"names":["axios","apiKey","requestWeatherDetails","city_code","undefined","console","log","data","fetch","json","requestFiveDayPrediction","get","params","apikey","metric","then","getCitiesList","city_name","new_data","q","map","city","index","Key","LocalizedName","AdministrativeArea","Country"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAG,kCAAf;;AAEAC,qBAAqB,GAAG,MAAOC,SAAP,IAAqB;AAC3C,MAAIA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKC,SAAxC,EAAmD;AACjDC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,UAAMC,IAAI,GAAG,MAAMC,KAAK,CACrB,2DAA0DL,SAAU,WAAUF,MAAO,EADhE,CAAL,CACwEQ,IADxE,EAAnB;AAEAJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,WAAOA,IAAP;AACD;;AACD,SAAO,EAAP;AACD,CATD;;AAWA,OAAO,SAASG,wBAAT,CAAkCP,SAAlC,EAA6C;AAClD,MAAIA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKC,SAAxC,EAAmD;AACjDC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAN,IAAAA,KAAK,CAACW,GAAN,CAAW,8DAA6DR,SAAU,OAAlF,EAA0F;AACxFS,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAEZ,MADF;AAENa,QAAAA,MAAM,EAAE;AAFF;AADgF,KAA1F,EAKGC,IALH,CAKQ,CAAC;AAAER,MAAAA;AAAF,KAAD,KAAc;AACpBF,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACA,aAAOA,IAAI,CAACE,IAAL,EAAP;AACD,KARD;AASD;;AACDJ,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,SAAO,EAAP;AACD;AAED,OAAO,SAASU,aAAT,CAAuBC,SAAvB,EAAkC;AACvC,MAAIC,QAAQ,GAAG,EAAf;;AACA,MAAID,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKb,SAApC,IAAiDa,SAAS,KAAK,EAAnE,EAAuE;AACrEZ,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAN,IAAAA,KAAK,CAACW,GAAN,CAAW,qEAAX,EAAiF;AAC/EC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAEZ,MADF;AAENkB,QAAAA,CAAC,EAAEF;AAFG;AADuE,KAAjF,EAKGF,IALH,CAKQ,CAAC;AAAER,MAAAA;AAAF,KAAD,KAAc;AACpBF,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ,EADoB,CAEpB;;AACAA,MAAAA,IAAI,CAACa,GAAL,CAAS,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACxBJ,QAAAA,QAAQ,CAACG,IAAI,CAACE,GAAN,CAAR,GAAsB,GAAEF,IAAI,CAACG,aAAc,KAAIH,IAAI,CAACI,kBAAL,CAAwBD,aAAc,KAAIH,IAAI,CAACK,OAAL,CAAaF,aAAc,EAApH;AACD,OAFD;AAGAnB,MAAAA,OAAO,CAACC,GAAR,CAAYY,QAAZ;AACD,KAZD;AAaD;;AACD,SAAOA,QAAP;AACD","sourcesContent":["import axios from 'axios';\r\n\r\nconst apiKey = 'xJ4I5DWKpOU1XHmK1ZrDmIkgfffyLX3s';\r\n \r\nrequestWeatherDetails = async (city_code) => {\r\n  if (city_code !== null && city_code !== undefined) {\r\n    console.log(\"weather bitches\");\r\n    const data = await fetch(\r\n      `http://dataservice.accuweather.com/currentconditions/v1/${city_code}?apikey=${apiKey}`).json();\r\n    console.log(data);\r\n    return data;\r\n  }\r\n  return {};\r\n}\r\n\r\nexport function requestFiveDayPrediction(city_code) {\r\n  if (city_code !== null && city_code !== undefined) {\r\n    console.log(\"weather bitches\");\r\n    axios.get(`http://dataservice.accuweather.com/forecasts/v1/daily/5day/${city_code}.json`, {\r\n      params: {\r\n        apikey: apiKey,\r\n        metric: true\r\n      }\r\n    }).then(({ data }) => {\r\n      console.log(data);\r\n      return data.json();\r\n    });\r\n  }\r\n  console.log(\"nop\");\r\n  return {};\r\n}\r\n\r\nexport function getCitiesList(city_name) {\r\n  var new_data = {};\r\n  if (city_name !== null && city_name !== undefined && city_name !== \"\") {\r\n    console.log(\"getting city list\")\r\n    axios.get(`http://dataservice.accuweather.com/locations/v1/cities/autocomplete`, {\r\n      params: {\r\n        apikey: apiKey,\r\n        q: city_name\r\n      }\r\n    }).then(({ data }) => {\r\n      console.log(data)\r\n      //filter the data to key, localizedName (see console)    \r\n      data.map((city, index) => {\r\n        new_data[city.Key] = `${city.LocalizedName}, ${city.AdministrativeArea.LocalizedName}, ${city.Country.LocalizedName}`;\r\n      })\r\n      console.log(new_data);\r\n    });\r\n  }\r\n  return new_data;\r\n}"]},"metadata":{},"sourceType":"module"}