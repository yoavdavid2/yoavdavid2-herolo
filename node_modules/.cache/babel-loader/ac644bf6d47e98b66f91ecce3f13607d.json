{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport createSet from '../createSet';\nexport default (() => {\n  const config = {\n    anchor: 'left',\n    variant: 'temporary',\n    width: 256,\n    collapsible: false,\n    collapsedWidth: 64,\n    hidden: false,\n    inset: false,\n    insetProps: {\n      position: 'fixed',\n      top: 0\n    }\n  };\n  const secondaryConfig = {\n    anchor: 'right',\n    variant: 'persistent',\n    width: 244,\n    collapsible: true,\n    collapsedWidth: 64,\n    hidden: false,\n    inset: false,\n    insetProps: {\n      position: 'sticky',\n      top: 0\n    }\n  };\n  return {\n    get: () => config,\n\n    initSecondary() {\n      _extends(config, secondaryConfig);\n\n      return this;\n    },\n\n    setAnchor: createSet(config, 'anchor'),\n    setWidth: createSet(config, 'width'),\n    setVariant: createSet(config, 'variant'),\n    setCollapsible: createSet(config, 'collapsible'),\n    setCollapsedWidth: createSet(config, 'collapsedWidth'),\n    setHidden: createSet(config, 'hidden'),\n    setInset: createSet(config, 'inset'),\n    setInsetProps: createSet(config, 'insetProps'),\n\n    set(value) {\n      _extends(config, value);\n\n      return this;\n    }\n\n  };\n});","map":{"version":3,"sources":["C:/Users/magshimim/react/weather/node_modules/@mui-treasury/layout/utils/ConfigGenerator/SidebarGenerator.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","createSet","config","anchor","variant","width","collapsible","collapsedWidth","hidden","inset","insetProps","position","top","secondaryConfig","get","initSecondary","setAnchor","setWidth","setVariant","setCollapsible","setCollapsedWidth","setHidden","setInset","setInsetProps","set","value"],"mappings":"AAAA,SAASA,QAAT,GAAoB;AAAEA,EAAAA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,UAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,WAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,YAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,UAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,WAAOL,MAAP;AAAgB,GAA5P;;AAA8P,SAAOH,QAAQ,CAACY,KAAT,CAAe,IAAf,EAAqBP,SAArB,CAAP;AAAyC;;AAE7T,OAAOQ,SAAP,MAAsB,cAAtB;AACA,gBAAgB,MAAM;AACpB,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbC,IAAAA,OAAO,EAAE,WAFI;AAGbC,IAAAA,KAAK,EAAE,GAHM;AAIbC,IAAAA,WAAW,EAAE,KAJA;AAKbC,IAAAA,cAAc,EAAE,EALH;AAMbC,IAAAA,MAAM,EAAE,KANK;AAObC,IAAAA,KAAK,EAAE,KAPM;AAQbC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,OADA;AAEVC,MAAAA,GAAG,EAAE;AAFK;AARC,GAAf;AAaA,QAAMC,eAAe,GAAG;AACtBV,IAAAA,MAAM,EAAE,OADc;AAEtBC,IAAAA,OAAO,EAAE,YAFa;AAGtBC,IAAAA,KAAK,EAAE,GAHe;AAItBC,IAAAA,WAAW,EAAE,IAJS;AAKtBC,IAAAA,cAAc,EAAE,EALM;AAMtBC,IAAAA,MAAM,EAAE,KANc;AAOtBC,IAAAA,KAAK,EAAE,KAPe;AAQtBC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,QADA;AAEVC,MAAAA,GAAG,EAAE;AAFK;AARU,GAAxB;AAaA,SAAO;AACLE,IAAAA,GAAG,EAAE,MAAMZ,MADN;;AAGLa,IAAAA,aAAa,GAAG;AACd3B,MAAAA,QAAQ,CAACc,MAAD,EAASW,eAAT,CAAR;;AAEA,aAAO,IAAP;AACD,KAPI;;AASLG,IAAAA,SAAS,EAAEf,SAAS,CAACC,MAAD,EAAS,QAAT,CATf;AAULe,IAAAA,QAAQ,EAAEhB,SAAS,CAACC,MAAD,EAAS,OAAT,CAVd;AAWLgB,IAAAA,UAAU,EAAEjB,SAAS,CAACC,MAAD,EAAS,SAAT,CAXhB;AAYLiB,IAAAA,cAAc,EAAElB,SAAS,CAACC,MAAD,EAAS,aAAT,CAZpB;AAaLkB,IAAAA,iBAAiB,EAAEnB,SAAS,CAACC,MAAD,EAAS,gBAAT,CAbvB;AAcLmB,IAAAA,SAAS,EAAEpB,SAAS,CAACC,MAAD,EAAS,QAAT,CAdf;AAeLoB,IAAAA,QAAQ,EAAErB,SAAS,CAACC,MAAD,EAAS,OAAT,CAfd;AAgBLqB,IAAAA,aAAa,EAAEtB,SAAS,CAACC,MAAD,EAAS,YAAT,CAhBnB;;AAkBLsB,IAAAA,GAAG,CAACC,KAAD,EAAQ;AACTrC,MAAAA,QAAQ,CAACc,MAAD,EAASuB,KAAT,CAAR;;AAEA,aAAO,IAAP;AACD;;AAtBI,GAAP;AAyBD,CApDD","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport createSet from '../createSet';\nexport default (() => {\n  const config = {\n    anchor: 'left',\n    variant: 'temporary',\n    width: 256,\n    collapsible: false,\n    collapsedWidth: 64,\n    hidden: false,\n    inset: false,\n    insetProps: {\n      position: 'fixed',\n      top: 0\n    }\n  };\n  const secondaryConfig = {\n    anchor: 'right',\n    variant: 'persistent',\n    width: 244,\n    collapsible: true,\n    collapsedWidth: 64,\n    hidden: false,\n    inset: false,\n    insetProps: {\n      position: 'sticky',\n      top: 0\n    }\n  };\n  return {\n    get: () => config,\n\n    initSecondary() {\n      _extends(config, secondaryConfig);\n\n      return this;\n    },\n\n    setAnchor: createSet(config, 'anchor'),\n    setWidth: createSet(config, 'width'),\n    setVariant: createSet(config, 'variant'),\n    setCollapsible: createSet(config, 'collapsible'),\n    setCollapsedWidth: createSet(config, 'collapsedWidth'),\n    setHidden: createSet(config, 'hidden'),\n    setInset: createSet(config, 'inset'),\n    setInsetProps: createSet(config, 'insetProps'),\n\n    set(value) {\n      _extends(config, value);\n\n      return this;\n    }\n\n  };\n});"]},"metadata":{},"sourceType":"module"}