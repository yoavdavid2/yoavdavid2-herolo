{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\magshimim\\\\react\\\\weather\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nimport useWindow from './useWindow';\n\nfunction useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n\n  const _useWindow = useWindow(),\n        iWindow = _useWindow.iWindow;\n\n  const props = getThemeProps({\n    theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: the `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof iWindow !== 'undefined' && typeof iWindow.matchMedia !== 'undefined';\n\n  const _extends2 = _extends({}, props, {}, options),\n        _extends2$defaultMatc = _extends2.defaultMatches,\n        defaultMatches = _extends2$defaultMatc === void 0 ? false : _extends2$defaultMatc,\n        _extends2$noSsr = _extends2.noSsr,\n        noSsr = _extends2$noSsr === void 0 ? false : _extends2$noSsr,\n        _extends2$ssrMatchMed = _extends2.ssrMatchMedia,\n        ssrMatchMedia = _extends2$ssrMatchMed === void 0 ? null : _extends2$ssrMatchMed;\n\n  const _React$useState = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return iWindow.matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        match = _React$useState2[0],\n        setMatch = _React$useState2[1];\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = iWindow.matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [iWindow, query, supportMatchMedia]);\n  return match;\n}\n\nexport default useMediaQuery;","map":{"version":3,"sources":["C:/Users/magshimim/react/weather/node_modules/@mui-treasury/layout/hooks/useMediaQuery.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","React","getThemeProps","useTheme","useWindow","useMediaQuery","queryInput","options","theme","iWindow","props","name","process","env","NODE_ENV","console","error","join","query","replace","supportMatchMedia","matchMedia","defaultMatches","noSsr","ssrMatchMedia","useState","matches","match","setMatch","useEffect","active","undefined","queryList","updateMatch","addListener","removeListener"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nimport useWindow from './useWindow';\n\nfunction useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme();\n  const {\n    iWindow\n  } = useWindow();\n  const props = getThemeProps({\n    theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: the `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof iWindow !== 'undefined' && typeof iWindow.matchMedia !== 'undefined';\n\n  const {\n    defaultMatches = false,\n    noSsr = false,\n    ssrMatchMedia = null\n  } = _extends({}, props, {}, options);\n\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return iWindow.matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  React.useEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = iWindow.matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [iWindow, query, supportMatchMedia]);\n  return match;\n}\n\nexport default useMediaQuery;"]},"metadata":{},"sourceType":"module"}