{"version":3,"sources":["weatherAPI.js","components/Weather/Prediction.js","components/Weather/WeatherCard.js","components/Weather/Search.js","components/Weather/WeatherDetails.js","components/Favorites.js","components/App.js","actions/index.js","reducers/index.js","index.js"],"names":["apiKey","requestWeatherDetails","city_code","a","async","undefined","fetch","then","response","json","data","requestFiveDayPrediction","forecast","getCitiesList","city_name","new_data","map","city","index","Key","LocalizedName","AdministrativeArea","Country","Prediction","date","Date","toUTCString","split","this","props","is_from_fav","name","temp_C","Temperature","Metric","Value","temp_F","Imperial","day","findDay","EpochDate","min_temp","Minimum","max_temp","Maximum","Grid","Typography","align","variant","React","Component","WeatherCard","state","favStat","futureData","createForecast","currentTemp","code","current_temp","create","Headline","setState","componentDidMount","callback","DailyForecasts","className","Card","key","id","IconButton","onClick","changeFavStat","color","Text","getFutureforecast","Search","cities_list","Object","keys","options","length","displayOptions","WeatherDetails","cityCode","cityName","e","preventDefault","getCityKey","document","getElementById","value","input","parseInt","FormControl","TextField","label","autoComplete","onChange","setOptions","onKeyDown","handleEnter","val","setInputVal","Favorites","fav_data","isEmpty","favorite_list","copy_fav_data","obj","hasOwnProperty","call","city_data","console","log","forEach","getFavData","App","is_favorites","err_message","is_fav","copy_fav_list","AppBar","position","Toolbar","Button","changeView","changeFav","ADD_FAV","REMOVE_FAV","initialState","fav_list","combineReducers","change_fav","action","copy_list","type","store","createStore","reducers","ReactDOM","render","querySelector"],"mappings":"6UAAMA,EAAS,mCAER,SAAeC,EAAsBC,GAArC,SAAAC,EAAAC,OAAA,mDACa,OAAdF,QAAoCG,IAAdH,EADrB,yCAEII,MAAM,4DAAD,OACkDJ,EADlD,mBACsEF,IAC9EO,MAAK,SAACC,GAAe,OAAOA,EAASC,UACxCF,MAAK,SAACG,GACL,OAAOA,MANN,gCASE,IATF,qCAYA,SAAeC,EAAyBT,GAAxC,eAAAC,EAAAC,OAAA,mDACDQ,EAAW,KACG,OAAdV,QAAoCG,IAAdH,EAFrB,kCAAAC,EAAA,MAGcG,MAAM,+DAAD,OAC2CJ,EAD3C,mBAC+DF,EAD/D,iBAElBO,MAAK,SAACC,GAAe,OAAOA,EAASC,UACxCF,MAAK,SAACG,GACL,OAAOA,MAPN,OAGHE,EAHG,uCAUEA,GAVF,qCAaA,SAAeC,EAAcC,GAA7B,eAAAX,EAAAC,OAAA,mDACDW,EAAW,GACG,OAAdD,QAAoCT,IAAdS,GAAyC,KAAdA,EAFhD,kCAAAX,EAAA,MAGcG,MAAM,+EAAD,OAC2DN,EAD3D,cACuEc,IAC3FP,MAAK,SAACC,GAAe,OAAOA,EAASC,UACtCF,MAAK,SAACG,GACL,OAAOA,EAAKM,KAAI,SAACC,EAAMC,GACrB,MAAM,GAAN,OAAUD,EAAKE,IAAf,YAAsBF,EAAKG,cAA3B,aAA6CH,EAAKI,mBAAmBD,cAArE,aAAuFH,EAAKK,QAAQF,sBARrG,OAGHL,EAHG,uCAYEA,GAZF,qC,iECUQQ,E,gLA5BLC,GAEN,OADU,IAAIC,KAAY,IAAPD,GAAaE,cAAcC,MAAM,MAAM,K,+BAK1D,GAAIC,KAAKC,MAAMC,YACb,IAAIhB,EAAYc,KAAKC,MAAME,KACvBC,EAASJ,KAAKC,MAAMnB,KAAKuB,YAAYC,OAAOC,MAC5CC,EAASR,KAAKC,MAAMnB,KAAKuB,YAAYI,SAASF,WAElD,IAAIG,EAAMV,KAAKW,QAAQX,KAAKC,MAAMnB,KAAK8B,WACnCC,EAAWb,KAAKC,MAAMnB,KAAKuB,YAAYS,QAAQP,MAC/CQ,EAAWf,KAAKC,MAAMnB,KAAKuB,YAAYW,QAAQT,MAErD,OACE,6BACE,kBAACU,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,MAAMpB,KAAKC,MAAMC,YAAX,UAA4BhB,GAA5B,UAA6CwB,IACtF,6BACA,kBAACQ,EAAA,EAAD,CAAYC,MAAM,UAAWnB,KAAKC,MAAMC,YAAX,UAA4BE,EAA5B,yBAAkDS,EAAlD,UAC7B,kBAACK,EAAA,EAAD,CAAYC,MAAM,UAAWnB,KAAKC,MAAMC,YAAX,UAA4BM,EAA5B,6BAAmDO,EAAnD,gB,GAvBbM,IAAMC,WCmEjBC,G,iNA7DbC,MAAQ,CAAEC,SAAS,EAAMC,WAAY,GAAIC,gBAAgB,EAAOC,YAAa,M,yLAGhDvD,EAAsB2B,KAAKC,MAAM4B,O,cAAtDC,E,0BACiB/C,EAAyBiB,KAAKC,MAAM4B,O,OAArD7C,E,OACF+C,IAAS/C,EAASgD,SACtBhC,KAAKiC,SAAS,CACZP,WAAY1C,EACZ2C,eAAgBI,EAChBH,YAAaE,I,4FAKf9B,KAAKkC,sB,sCAKLlC,KAAKiC,SAAS,CAAER,SAAUzB,KAAKwB,MAAMC,UACrCzB,KAAKC,MAAMkC,SAASnC,KAAKC,MAAM4B,KAAM7B,KAAKC,MAAMf,UAAWc,KAAKwB,MAAMC,W,0CAItE,YAA6ChD,IAAzCuB,KAAKwB,MAAME,WAAWU,eAEtB,yBAAKC,UAAU,YACXrC,KAAKwB,MAAME,WAAWU,eAAehD,KAAI,SAACsB,EAAKpB,GAC/C,OACE,kBAACgD,EAAA,EAAD,CAAMD,UAAU,OAAOE,IAAKjD,GAC1B,kBAAC,EAAD,CAAYR,KAAM4B,EAAKR,aAAa,SAOzC,O,+BAGC,IAAD,OACP,OACE,6BACE,kBAACoC,EAAA,EAAD,KACE,yBAAKE,GAAG,eACN,kBAACtB,EAAA,EAAD,CAAYE,QAAQ,KAAKiB,UAAU,eAChCrC,KAAKC,MAAMf,UAAUa,MAAM,KAAK,GAAK,KAAOC,KAAKC,MAAMf,UAAUa,MAAM,KAAK,GAAI,KACrD,OAA3BC,KAAKwB,MAAMI,YAAuB5B,KAAKwB,MAAMI,YAAY,GAAGvB,YAAYC,OAAOC,MAAQ,QAAM,MAEhG,kBAACkC,EAAA,EAAD,CAAYJ,UAAU,WAAWK,QAAS,kBAAM,EAAKC,kBACjD3C,KAAKwB,MAAMC,QAA4C,kBAAC,IAAD,CAAoBmB,MAAM,YAA5D,kBAAC,IAAD,CAAcA,MAAM,aAE7C,kBAAC1B,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,MAAQpB,KAAKwB,MAAMG,eAAiB3B,KAAKwB,MAAME,WAAWM,SAASa,KAAO,OAE9G7C,KAAKwB,MAAMG,eAAiB3B,KAAK8C,oBAAsB,kBAAC5B,EAAA,EAAD,yB,GAxDxCG,IAAMC,YCyBjByB,E,2MA5BbvB,MAAQ,CAAEwB,YAAa,I,gFAEL,IAAD,OACf,OAAIC,OAAOC,KAAKlD,KAAKC,MAAMkD,SAASC,OAC3BpD,KAAKC,MAAMkD,QAAQ/D,KAAI,SAACC,GAC7B,IAAIkD,EAAMlD,EAAKU,MAAM,KAAK,GACtBI,EAAOd,EAAKU,MAAM,KAAK,GAC3B,OACE,yBAAKwC,IAAKA,EAAKG,QAAS,kBAAM,EAAKzC,MAAMkC,SAAShC,KAChD,kBAACe,EAAA,EAAD,KAAaf,OAKd,O,+BAIP,OACE,6BACE,kBAACmC,EAAA,EAAD,KACGtC,KAAKqD,uB,GAvBKhC,IAAMC,WC+DZgC,E,2MA1Db9B,MAAQ,CAAE+B,SAAU,OAASC,SAAU,qBAAsBL,QAAS,I,2EAE1DM,GACI,UAAVA,EAAElB,MACJkB,EAAEC,iBACF1D,KAAK2D,WAAWC,SAASC,eAAe,aAAaC,OACrDF,SAASC,eAAe,aAAaC,MAAQ,M,iCAIhCC,G,8EACf/D,K,mBACiBf,EAAc8E,I,yBAA7BZ,Q,WADGlB,S,mGAKK9B,GACVyD,SAASC,eAAe,aAAaC,MAAQ3D,EAC7CH,KAAKiC,SAAS,CACZkB,QAAS,KAEXnD,KAAK2D,WAAWxD,K,iCAGDjB,G,wGACSD,EAAcC,EAAUa,MAAM,KAAK,K,OAC3D,IAASV,KADL2D,E,OAEET,EAAMyB,SAAShB,EAAY3D,GAAMU,MAAM,KAAK,GAAI,IAChDI,EAAO6C,EAAY3D,GAAMU,MAAM,KAAK,GACpCb,IAAciB,GAChBH,KAAKiC,SAAS,CACZsB,SAAUhB,EACViB,SAAUrD,I,gFAMR,IAAD,OACP,OACE,6BACE,kBAAC8D,EAAA,EAAD,CAAa5B,UAAU,cACrB,kBAAC6B,EAAA,EAAD,CACE1B,GAAG,YACH2B,MAAM,kBACNC,aAAa,MACbC,SAAU,kBAAM,EAAKC,WAAWV,SAASC,eAAe,aAAaC,QACrES,UAAW,SAACd,GAAD,OAAO,EAAKe,YAAYf,MAErC,kBAAC,EAAD,CAAQN,QAASnD,KAAKwB,MAAM2B,QAAShB,SAAU,SAACsC,GAAD,OAAS,EAAKC,YAAYD,OAE3E,6BACA,kBAAC,EAAD,CAAapC,UAAU,WAAWR,KAAM7B,KAAKwB,MAAM+B,SAAUrE,UAAWc,KAAKwB,MAAMgC,SAAUrB,SAAUnC,KAAKC,MAAMkC,gB,GAtD7Fd,IAAMC,WCkEpBqD,E,2MAjEbnD,MAAQ,CAAEoD,SAAU,I,gKAGb5E,KAAK6E,QAAQ7E,KAAKC,MAAM6E,gBAC3B7B,OAAOC,KAAKlD,KAAKC,MAAM6E,eAAe1F,KAAI,SAAOd,EAAWgB,GAAlB,eAAAf,EAAAC,OAAA,uDAClCuG,EADkC,eACb,EAAKvD,MAAMoD,UADE,WAAArG,EAAA,MAEFF,EAAsB,EAAK4B,MAAM6E,cAAcxG,KAF7C,OAExCyG,EAAc,GAAD,OAAIzG,IAFuB,OAGxC,EAAK2D,SAAS,CACZ2C,SAAUG,IAJ4B,wC,+EAUtCC,GACN,GAAW,MAAPA,EAAa,OAAO,EACxB,GAAIA,EAAI5B,OAAS,EAAM,OAAO,EAC9B,GAAmB,IAAf4B,EAAI5B,OAAe,OAAO,EAC9B,GAAmB,kBAAR4B,EAAkB,OAAO,EACpC,IAAK,IAAIzC,KAAOyC,EACd,GAAIC,eAAeC,KAAKF,EAAKzC,GAAM,OAAO,EAE5C,OAAO,I,iCAGQjE,G,kGACSD,EAAsBC,I,cAAxC6G,E,OACNC,QAAQC,IAAIF,G,kBACLA,G,0EAGK,IAAD,OAEX,OADAC,QAAQC,IAAIpC,OAAOC,KAAKlD,KAAKwB,MAAMoD,UAAUxB,QACzCpD,KAAKwB,MAAMoD,UAAY3B,OAAOC,KAAKlD,KAAKwB,MAAMoD,UAAUxB,OAExD,yBAAKf,UAAU,YACXY,OAAOC,KAAKlD,KAAKwB,MAAMoD,UAAUU,SAAQ,SAACpG,EAAWI,GACrD,OACE,kBAACgD,EAAA,EAAD,CAAMD,UAAU,OAAOE,IAAKjD,GAC1B,kBAAC,EAAD,CAAYa,KAAMjB,EAAWJ,KAAM,EAAK0C,MAAMoD,SAAS1F,GAAW,GAAIgB,aAAa,SAQ7F,yBAAKmC,UAAU,YACb,kBAACnB,EAAA,EAAD,4B,+BASJ,OADAkE,QAAQC,IAAIrF,KAAKC,MAAM6E,eAErB,6BACG9E,KAAKuF,kB,GA7DUlE,IAAMC,WCmDfkE,E,2MA/CbhE,MAAQ,CAAEiE,cAAc,EAAOC,YAAa,GAAIZ,cAAe,I,0EAEpDa,GACL3F,KAAKwB,MAAMiE,eAAiBE,GAC9B3F,KAAKiC,SAAS,CAAEwD,cAAezF,KAAKwB,MAAMiE,iB,gCAIpC5D,EAAM1B,EAAMwF,GACpB,IAAMC,EAAa,eAAO5F,KAAKwB,MAAMsD,eACjCa,GACFC,EAAczF,EAAKJ,MAAM,KAAK,IAAMiE,SAASnC,EAAM,IACnD7B,KAAKiC,SAAS,CACZ6C,cAAec,aAGVA,EAAczF,GACrBH,KAAKiC,SAAS,CACZ6C,cAAec,O,+BAKX,IAAD,OAEP,OADAR,QAAQC,IAAIrF,KAAKwB,MAAMsD,eAErB,yBAAKtC,GAAG,eACN,kBAACqD,EAAA,EAAD,CAAQC,SAAS,YACf,kBAACC,EAAA,EAAD,CAAS1D,UAAU,YACjB,kBAACnB,EAAA,EAAD,CAAYE,QAAQ,MAApB,uBAGA,yBAAKiB,UAAU,eACb,kBAAC2D,EAAA,EAAD,CAAQ3D,UAAU,kBAAkBO,MAAM,UAAUF,QAAS,kBAAM,EAAKuD,YAAW,KAAnF,QACA,kBAACD,EAAA,EAAD,CAAQ3D,UAAU,6BAA6BO,MAAM,UAAUF,QAAS,kBAAM,EAAKuD,YAAW,KAA9F,gBAIN,8BACGjG,KAAKwB,MAAMiE,aAAe,kBAAC,EAAD,CAAWX,cAAe9E,KAAKwB,MAAMsD,gBAC9D,kBAAC,EAAD,CAAgB3C,SAAU,SAAC7D,EAAWY,EAAWyG,GAAvB,OAAkC,EAAKO,UAAU5H,EAAWY,EAAWyG,Y,GA1C3FtE,IAAMC,WCVX6E,EAAU,UACVC,EAAa,aCG1B,IAAMC,EAAe,CACnBC,SAAU,IAkBGC,cAAgB,CAC7BC,WAhBoB,WAAmC,IAAlChF,EAAiC,uDAAzB6E,EAAcI,EAAW,uCAClDC,EAAS,eAAOlF,GACpB,OAAQiF,EAAOE,MACb,KAAKR,EAEH,OADAO,EAAUD,EAAOvH,WAAauH,EAAOnI,UAC9BoI,EACT,KAAKN,EAEH,cADOM,EAAUD,EAAOvH,WACjBwH,EACT,QACE,OAAOlF,MCVPoF,EAAQC,YAAYC,GAE1BC,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFhD,SAASqD,cAAc,Y","file":"static/js/main.a6ac4aad.chunk.js","sourcesContent":["const apiKey = 'lB93giYbYMgzTngoCqgk8x0dSVTucyTF'; \r\n \r\nexport async function requestWeatherDetails(city_code){\r\n  if (city_code !== null && city_code !== undefined) {\r\n    return fetch(\r\n      `https://dataservice.accuweather.com/currentconditions/v1/${city_code}?apikey=${apiKey}`\r\n      ).then((response) => { return response.json() })\r\n    .then((data) => {\r\n      return data;\r\n    })\r\n  }\r\n  return {};\r\n}\r\n\r\nexport async function requestFiveDayPrediction(city_code) {\r\n  var forecast = null;\r\n  if (city_code !== null && city_code !== undefined) {\r\n    forecast = await fetch(\r\n      `https://dataservice.accuweather.com/forecasts/v1/daily/5day/${city_code}?apikey=${apiKey}&metric=true`\r\n      ).then((response) => { return response.json() })\r\n    .then((data) => {\r\n      return data;\r\n    });\r\n  }\r\n  return forecast;\r\n}\r\n\r\nexport async function getCitiesList(city_name) {\r\n  var new_data = { };\r\n  if (city_name !== null && city_name !== undefined && city_name !== \"\") {\r\n    new_data = await fetch(\r\n      `https://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=${apiKey}&q=${city_name}`\r\n    ).then((response) => { return response.json() })\r\n    .then((data) => {\r\n      return data.map((city, index) => {\r\n        return `${city.Key}/${city.LocalizedName}, ${city.AdministrativeArea.LocalizedName}, ${city.Country.LocalizedName}`;\r\n      })\r\n    })\r\n  }\r\n  return new_data;\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n/*This class is the card of the daily forecast (the one that appears in favorites for each city \r\nand the one that appears five times in the home screen)*/\r\n\r\n class Prediction extends React.Component {\r\n\r\n  findDay(date) {\r\n    var day = new Date(date * 1000).toUTCString().split(', ')[0];\r\n    return day;\r\n  }\r\n\r\n  render() {\r\n    if (this.props.is_from_fav) {\r\n      var city_name = this.props.name;\r\n      var temp_C = this.props.data.Temperature.Metric.Value;\r\n      var temp_F = this.props.data.Temperature.Imperial.Value;\r\n    } else {\r\n      var day = this.findDay(this.props.data.EpochDate);\r\n      var min_temp = this.props.data.Temperature.Minimum.Value;\r\n      var max_temp = this.props.data.Temperature.Maximum.Value;\r\n    }\r\n    return (\r\n      <div>\r\n        <Grid>\r\n          <Typography align=\"center\" variant=\"h5\">{this.props.is_from_fav ? `${city_name}` : `${day}`}</Typography>\r\n          <br />\r\n          <Typography align=\"center\">{ this.props.is_from_fav ? `${temp_C}°C` : `min - ${min_temp}°C` }</Typography>\r\n          <Typography align=\"center\">{ this.props.is_from_fav ? `${temp_F}­°F` : `max - ${max_temp}°C` }</Typography>\r\n        </Grid>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Prediction;","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Prediction from './Prediction';\r\nimport { requestFiveDayPrediction, requestWeatherDetails } from '../../weatherAPI';\r\nimport '../../styles.css';\r\n\r\nclass WeatherCard extends React.Component {\r\n\r\n  state = { favStat: true, futureData: [], createForecast: false, currentTemp: null};\r\n\r\n  async componentDidMount() {\r\n    const current_temp = await requestWeatherDetails(this.props.code);\r\n    const forecast = await requestFiveDayPrediction(this.props.code);\r\n    var create = forecast.Headline ? true : false\r\n    this.setState({\r\n      futureData: forecast,\r\n      createForecast: create,\r\n      currentTemp: current_temp\r\n    });\r\n  }\r\n  \r\n  componentDidUpdate() {\r\n    this.componentDidMount();\r\n  }\r\n\r\n\r\n  changeFavStat() {\r\n    this.setState({ favStat: !this.state.favStat});\r\n    this.props.callback(this.props.code, this.props.city_name ,this.state.favStat);\r\n  }\r\n\r\n  getFutureforecast() {\r\n    if (this.state.futureData.DailyForecasts !== undefined) {\r\n      return (\r\n        <div className=\"card-div\">\r\n          { this.state.futureData.DailyForecasts.map((day, index) => {\r\n            return (\r\n              <Card className=\"card\" key={index}>\r\n                <Prediction data={day} is_from_fav={false}/>\r\n              </Card>\r\n            );\r\n          })} \r\n        </div>\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Card>\r\n          <div id=\"credentials\">\r\n            <Typography variant=\"h6\" className=\"details_tag\">\r\n              {this.props.city_name.split(',')[0] + \", \" + this.props.city_name.split(',')[2]}{\"\\t\"}\r\n              {this.state.currentTemp !== null ? this.state.currentTemp[0].Temperature.Metric.Value + \"°C\": null}\r\n            </Typography>\r\n            <IconButton className=\"fav-icon\" onClick={() => this.changeFavStat()}>\r\n              {!this.state.favStat ? <FavoriteIcon color=\"primary\"/> : <FavoriteBorderIcon color=\"primary\"/>}\r\n            </IconButton>\r\n            <Typography align=\"center\" variant=\"h5\" >{ this.state.createForecast ? this.state.futureData.Headline.Text : null }</Typography>\r\n          </div>\r\n          {this.state.createForecast ? this.getFutureforecast() : <Typography>Loading...</Typography>}\r\n        </Card>          \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherCard;","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport '../../styles.css';\r\n\r\nclass Search extends React.Component {\r\n\r\n  state = { cities_list: { } };\r\n\r\n  displayOptions() {\r\n    if (Object.keys(this.props.options).length) {\r\n      return this.props.options.map((city) => {\r\n        var key = city.split('/')[0];\r\n        var name = city.split('/')[1];\r\n        return (\r\n          <div key={key} onClick={() => this.props.callback(name)}>\r\n            <Typography>{name}</Typography>\r\n          </div>\r\n        );\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Card>\r\n          {this.displayOptions()}\r\n        </Card>     \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { getCitiesList } from '../../weatherAPI';\r\nimport WeatherCard from './WeatherCard';\r\nimport Search from './Search';\r\nimport '../../styles.css';\r\n\r\nclass WeatherDetails extends React.Component {\r\n\r\n  state = { cityCode: 215854 , cityName: 'Tel Aviv, , Israel', options: [] }; //Tel Aviv code - default location code\r\n\r\n  handleEnter(e) {\r\n    if (e.key === 'Enter') {\r\n      e.preventDefault();\r\n      this.getCityKey(document.getElementById('loc_input').value);\r\n      document.getElementById('loc_input').value = '';\r\n    }\r\n  }\r\n\r\n  async setOptions(input) {\r\n    this.setState({\r\n      options: await getCitiesList(input)\r\n    });\r\n  }\r\n\r\n  setInputVal(name) {\r\n    document.getElementById('loc_input').value = name;\r\n    this.setState({\r\n      options: []\r\n    });\r\n    this.getCityKey(name);\r\n  }\r\n\r\n  async getCityKey(city_name) {\r\n    var cities_list = await getCitiesList(city_name.split(',')[0]);\r\n    for (var city in cities_list) {\r\n      var key = parseInt(cities_list[city].split('/')[0], 10);\r\n      var name = cities_list[city].split('/')[1];\r\n      if (city_name === name) {\r\n        this.setState({\r\n          cityCode: key, \r\n          cityName: name\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <FormControl className=\"search-bar\">\r\n          <TextField\r\n            id=\"loc_input\" \r\n            label=\"Search Location\"\r\n            autoComplete=\"off\"\r\n            onChange={() => this.setOptions(document.getElementById('loc_input').value)}\r\n            onKeyDown={(e) => this.handleEnter(e)}\r\n          />\r\n          <Search options={this.state.options} callback={(val) => this.setInputVal(val)}/>\r\n        </FormControl>\r\n        <br />\r\n        <WeatherCard className=\"detailed\" code={this.state.cityCode} city_name={this.state.cityName} callback={this.props.callback}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherDetails;","import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Prediction from './Weather/Prediction';\r\nimport { requestWeatherDetails } from '../weatherAPI';\r\nimport '../styles.css';\r\n\r\nclass Favorites extends React.Component{\r\n  \r\n  state = { fav_data: { } };\r\n//'Tel Aviv': 215854, 'London': 238238, 'Bucharest': 287430\r\n  async componentDidMount() {\r\n    if (!this.isEmpty(this.props.favorite_list)) {\r\n      Object.keys(this.props.favorite_list).map(async (city_code, index) => {\r\n        const copy_fav_data = { ...this.state.fav_data };\r\n        copy_fav_data[`${city_code}`] = await requestWeatherDetails(this.props.favorite_list[city_code]);\r\n        this.setState({\r\n          fav_data: copy_fav_data\r\n        }) ;\r\n      });\r\n    }\r\n  }\r\n\r\n  isEmpty(obj) {\r\n    if (obj == null) return true;\r\n    if (obj.length > 0)    return false;\r\n    if (obj.length === 0)  return true;\r\n    if (typeof obj !== \"object\") return true;\r\n    for (var key in obj) {\r\n      if (hasOwnProperty.call(obj, key)) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  async getFavList(city_code) {\r\n    const city_data = await requestWeatherDetails(city_code)\r\n    console.log(city_data);\r\n    return city_data;\r\n  }\r\n\r\n  getFavData() {\r\n    console.log(Object.keys(this.state.fav_data).length);\r\n    if (this.state.fav_data && Object.keys(this.state.fav_data).length) {\r\n      return (\r\n        <div className=\"card-div\">\r\n          { Object.keys(this.state.fav_data).forEach((city_name ,index) => {\r\n            return (\r\n              <Card className=\"card\" key={index}>\r\n                <Prediction name={city_name} data={this.state.fav_data[city_name][0]} is_from_fav={true}/>\r\n              </Card>\r\n            );\r\n          })} \r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"card-div\">\r\n        <Typography>\r\n          No Favorites Yet\r\n        </Typography>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.favorite_list);\r\n    return (\r\n      <div>\r\n        {this.getFavData()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Favorites;","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Button from '@material-ui/core/Button';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport WeatherDetails from './Weather/WeatherDetails';\r\nimport Favorites from './Favorites';\r\nimport '../styles.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = { is_favorites: false, err_message: '', favorite_list: { } };\r\n\r\n  changeView(is_fav) {\r\n    if (this.state.is_favorites !== is_fav) {\r\n      this.setState({ is_favorites: !this.state.is_favorites });\r\n    }\r\n  }\r\n\r\n  changeFav(code, name, is_fav) {\r\n    const copy_fav_list = {...this.state.favorite_list};\r\n    if (is_fav) {\r\n      copy_fav_list[name.split(',')[0]] = parseInt(code, 10);\r\n      this.setState({\r\n        favorite_list: copy_fav_list\r\n      });\r\n    } else {\r\n      delete copy_fav_list[name];\r\n      this.setState({\r\n        favorite_list: copy_fav_list\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.favorite_list);\r\n    return (\r\n      <div id=\"app-bar-div\"> \r\n        <AppBar position=\"relative\">\r\n          <Toolbar className=\"tool-bar\">\r\n            <Typography variant=\"h6\">\r\n              Herolo Weather Task\r\n            </Typography>\r\n            <div className=\"buttons-div\">\r\n              <Button className=\"app-bar-buttons\" color=\"default\" onClick={() => this.changeView(false)}>Home</Button>\r\n              <Button className=\"app-bar-buttons fav-button\" color=\"default\" onClick={() => this.changeView(true)}>Favorites</Button>\r\n            </div>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <form>\r\n          {this.state.is_favorites ? <Favorites favorite_list={this.state.favorite_list}/> :\r\n            <WeatherDetails callback={(city_code, city_name, is_fav) => this.changeFav(city_code, city_name, is_fav)}/>}\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","export const ADD_FAV = 'ADD_FAV'\r\nexport const REMOVE_FAV = 'REMOVE_FAV'\r\n\r\n\r\nexport function AddToFav(city_code, city_name) {\r\n  return {\r\n    type: ADD_FAV,\r\n    city_name,\r\n    city_code \r\n  }\r\n}\r\n\r\nexport function RemoveFromFav(city_name) {\r\n  return {\r\n    type: REMOVE_FAV,\r\n    city_name\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\n\r\nimport { ADD_FAV, REMOVE_FAV } from '../actions';\r\n\r\nconst initialState = {\r\n  fav_list: [],\r\n};\r\n\r\nconst changeFavList = (state = initialState, action) => {\r\n  var copy_list = {...state};\r\n  switch (action.type) {\r\n    case ADD_FAV:\r\n      copy_list[action.city_name] = action.city_code;\r\n      return copy_list;\r\n    case REMOVE_FAV:\r\n      delete copy_list[action.city_name];\r\n      return copy_list;\r\n    default:\r\n      return state;\r\n\r\n  }\r\n}\r\n\r\nexport default combineReducers({\r\n  change_fav: changeFavList\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\n\r\nconst store = createStore(reducers);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.querySelector('#root')\r\n);"],"sourceRoot":""}